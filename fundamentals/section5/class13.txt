Pointers scare a lot of new programmers. 
Something about them is just hard to grasp for new developers trying to learn about memory under the hood.

Pointers
A pointer is a variable who's value equals the address of another variable... yeah thats it. 
It's nothing scary or complicated.
Ahh yes, pointers. Lovely pointers.
Pointers are not that hard. Let me explain.
You learned previously how memory works. Memory has two properties, a value and an address.
All a pointer is, is a variable who's value is an address. A pointer is an address. That's it.


Creating a Pointer
To make a pointer, first you need another variable that you want to point to.

int x = 3;

To create a pointer that points to x, all we'd have to do is create a pointer and set it's value equal to the address of x. 
We can do that with the following syntax.

int x = 3;
int *pX = &x;

Here, the syntax is as follows. 
The * character notes that the type is a pointer. 
The & character gets the "address of", which gets the address of x and puts that value in pX.
So, all this means is that pX is a variable that contains the address of x. That's it.


Why Do We Even Need Pointers?
Remember our lesson scope? Variables are either in scope or out of scope. But, this makes programming hard. 
What if we want to access variables that are temporarily out of scope? 
Like what if we're in a function, and we want to edit the value of a variable that is out of scope of that function.

One way we can do this is to pass the address (pointer) of another variable into that function. 
Now, we've built a bridge into the other functions scope.

Reading Pointers
To use a pointer, all you have to do is "dereference" it. Dereferencing means basically "get the value at a location."

To dereference a pointer, simply add the * to the name of the pointer to get the value at that location.

int x = 3;
int *pX = &x;
printf("%d\n", *pX);
// 3

Here, we've printed the value that pX points to. Note that this is NOT us printing the value of pX. We're printing what pX points to.

Writing to a Pointer
Similarly, we can use a pointer to write a value.

int x = 3;
int *pX = &x;
printf("%d\n", *pX);
// 3
*pX = 4;
printf("%d\n", *pX);
// 4

Here, we used the same logic to update the value that pX points to.