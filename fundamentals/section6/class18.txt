### What is glibc? ###
So far, we've just about covered all of the features that the C programming language has to offer. 
You're probably thinking... no way thats possible. Well, it is. The C Programming language itself is incredibly simple. 
The power of the language comes from its simplicity and the control it leaves to the developer.

You've probably also noticed that we used a few magical functions that we didnt write ourselves. 
These functions come from a library that we'll talk about in this section.

### Glibc ###
Glibc, or the GNU C library, is the library that gets baked into every program you compile with gcc. 
This concept is important to understand because it will be the foundation of every program you write, and as a result you 
should understand GNU C library functionality.

### Why ###
When we write code, we write userland code, or code that exists in the context of a userspace process. 
To the CPU, this code is unpriveleged, and as a result it can't really do anything fancy, like allocate memory, access the 
filesystem, or access the network.

To do privleged things, we ask the kernel (which runs as privleged code) to do it for us. 
This is done through what is called a "system call interface" where the syscall instruction is ran, and asks the kernel to 
perform a certain action.

The GNU C library cleanly wraps all of this functionality up into easy to use functions that wrap the otherwise hard to 
maintain system call functionality

### Malloc ###
For example, when we allocate memory from the kernel for our process, we use malloc. 
Malloc internally calls the sbrk or mmap system calls, which asks the kernel through a system call to give us more memory. 
All of this abstracted away from us as the developer, and all we have to do is managed the result

### Proof ###
To see what libraries your program is linked against, try:

ldd  ./myprogram

To check the ELF File (Executable and Linkable Format), try:
file ./myprogram