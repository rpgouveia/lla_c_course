### Make ###
make is a tool that, when ran, finds a local Makefile and executes the instructions to build a particular target.
Makefile is a file that contains a set of directives used with the make build automation tool to generate a target/goal.
It is commonly used to compile and link programs, but can be used for any task that requires automation of a sequence of commands.

### Syntax ###
Makefiles are organized around targets, rules, and instructions

TARGET = bin/final
SRC = $(wildcard src/*.c)
OBJ = $(patsubst src/%.c, obj/%.o, $(SRC))

default: $(TARGET)

Here, default is a target, that says to be complete, first the $(TARGET) binary must be complete. 
Once that is complete, the instructions within default will be ran.

Make will take this logic forward and recursively run the functionality in the Makefile until the target is met.

### Example ###
TARGET = bin/final
SRC = $(wildcard src/*.c)
OBJ = $(patsubst src/%.c, obj/%.o, $(SRC))

default: $(TARGET)

clean:
	rm -f obj/*.o
	rm -f bin/*

$(TARGET): $(OBJ)
	gcc -o $@ $?

obj/%.o : src/%.c
	gcc -c $< -o $@ -Iinclude

### Wildcard ###
Wildcard will capture all of our source files as a list in src/

### Patsubst ###
Patsubst will execute a pattern substitution and convert all src/\*.c to obj/\*.o

### Symbols ###
$? represents a list of all input files given as a target
$< represents a single file given as a target
$@ represents the target of the rule